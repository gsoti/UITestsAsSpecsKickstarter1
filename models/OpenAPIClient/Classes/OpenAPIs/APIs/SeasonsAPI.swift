//
// SeasonsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class SeasonsAPI {

    /**
     Get specific season details.
     
     - parameter seasonID: (path) ID of the season. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getSeasonsDetails(seasonID: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: AnyCodable?, _ error: Error?) -> Void)) -> RequestTask {
        return getSeasonsDetailsWithRequestBuilder(seasonID: seasonID).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get specific season details.
     - GET /seasons/{seasonID}
     - This endpoint will retrieve the details of a specific season.
     - parameter seasonID: (path) ID of the season. 
     - returns: RequestBuilder<AnyCodable> 
     */
    open class func getSeasonsDetailsWithRequestBuilder(seasonID: Int) -> RequestBuilder<AnyCodable> {
        var localVariablePath = "/seasons/{seasonID}"
        let seasonIDPreEscape = "\(APIHelper.mapValueToPathItem(seasonID))"
        let seasonIDPostEscape = seasonIDPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{seasonID}", with: seasonIDPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AnyCodable>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     * enum for parameter hideFillers
     */
    public enum HideFillers_getSeasonsEpisodes: Int, CaseIterable {
        case _0 = 0
        case _1 = 1
    }

    /**
     Retrieve season episodes.
     
     - parameter seasonID: (path) ID of the season. 
     - parameter hideFillers: (query) Indicates whether filler episodes should be included. - 0 &#x3D; Include fillers - 1 &#x3D; No fillers (optional, default to ._0)
     - parameter limit: (query) The limit on the number of objects, or number of objects in the specified relationship, that are returned. The default value is 25 and the maximum value is 100. (optional)
     - parameter page: (query) The next page or group of objects to fetch. The default value is 1. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getSeasonsEpisodes(seasonID: Int, hideFillers: HideFillers_getSeasonsEpisodes? = nil, limit: String? = nil, page: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: AnyCodable?, _ error: Error?) -> Void)) -> RequestTask {
        return getSeasonsEpisodesWithRequestBuilder(seasonID: seasonID, hideFillers: hideFillers, limit: limit, page: page).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Retrieve season episodes.
     - GET /seasons/{seasonID}/episodes
     - This endpoint will retrieve the episodes in a certain season.
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - parameter seasonID: (path) ID of the season. 
     - parameter hideFillers: (query) Indicates whether filler episodes should be included. - 0 &#x3D; Include fillers - 1 &#x3D; No fillers (optional, default to ._0)
     - parameter limit: (query) The limit on the number of objects, or number of objects in the specified relationship, that are returned. The default value is 25 and the maximum value is 100. (optional)
     - parameter page: (query) The next page or group of objects to fetch. The default value is 1. (optional)
     - returns: RequestBuilder<AnyCodable> 
     */
    open class func getSeasonsEpisodesWithRequestBuilder(seasonID: Int, hideFillers: HideFillers_getSeasonsEpisodes? = nil, limit: String? = nil, page: String? = nil) -> RequestBuilder<AnyCodable> {
        var localVariablePath = "/seasons/{seasonID}/episodes"
        let seasonIDPreEscape = "\(APIHelper.mapValueToPathItem(seasonID))"
        let seasonIDPostEscape = seasonIDPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{seasonID}", with: seasonIDPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "hide_fillers": (wrappedValue: hideFillers?.encodeToJSON(), isExplode: true),
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: true),
            "page": (wrappedValue: page?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AnyCodable>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Marks the episodes of a season as \"watched\" or \"not watched\".
     
     - parameter seasonID: (path) ID of the season. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func postSeasonsWatched(seasonID: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: AnyCodable?, _ error: Error?) -> Void)) -> RequestTask {
        return postSeasonsWatchedWithRequestBuilder(seasonID: seasonID).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Marks the episodes of a season as \"watched\" or \"not watched\".
     - POST /seasons/{seasonID}/watched
     - This endpoint will updated the watched status for the episodes of a season.
     - Bearer Token:
       - type: http
       - name: bearerAuth
     - parameter seasonID: (path) ID of the season. 
     - returns: RequestBuilder<AnyCodable> 
     */
    open class func postSeasonsWatchedWithRequestBuilder(seasonID: Int) -> RequestBuilder<AnyCodable> {
        var localVariablePath = "/seasons/{seasonID}/watched"
        let seasonIDPreEscape = "\(APIHelper.mapValueToPathItem(seasonID))"
        let seasonIDPostEscape = seasonIDPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{seasonID}", with: seasonIDPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AnyCodable>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
